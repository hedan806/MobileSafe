package com.hedan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hedan.dao.BlackNumber;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLACK_NUMBER".
*/
public class BlackNumberDao extends AbstractDao<BlackNumber, Long> {

    public static final String TABLENAME = "BLACK_NUMBER";

    /**
     * Properties of entity BlackNumber.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Call_intercept = new Property(3, Boolean.class, "call_intercept", false, "CALL_INTERCEPT");
        public final static Property Sms_intercept = new Property(4, Boolean.class, "sms_intercept", false, "SMS_INTERCEPT");
        public final static Property Ctime = new Property(5, java.util.Date.class, "ctime", false, "CTIME");
    };


    public BlackNumberDao(DaoConfig config) {
        super(config);
    }
    
    public BlackNumberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLACK_NUMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PHONE\" TEXT NOT NULL ," + // 1: phone
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"CALL_INTERCEPT\" INTEGER," + // 3: call_intercept
                "\"SMS_INTERCEPT\" INTEGER," + // 4: sms_intercept
                "\"CTIME\" INTEGER NOT NULL );"); // 5: ctime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLACK_NUMBER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BlackNumber entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPhone());
        stmt.bindString(3, entity.getName());
 
        Boolean call_intercept = entity.getCall_intercept();
        if (call_intercept != null) {
            stmt.bindLong(4, call_intercept ? 1L: 0L);
        }
 
        Boolean sms_intercept = entity.getSms_intercept();
        if (sms_intercept != null) {
            stmt.bindLong(5, sms_intercept ? 1L: 0L);
        }
        stmt.bindLong(6, entity.getCtime().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BlackNumber readEntity(Cursor cursor, int offset) {
        BlackNumber entity = new BlackNumber( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // phone
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // call_intercept
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // sms_intercept
            new java.util.Date(cursor.getLong(offset + 5)) // ctime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BlackNumber entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setCall_intercept(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setSms_intercept(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCtime(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BlackNumber entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BlackNumber entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
